//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cheburashka {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class RuleResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RuleResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cheburashka.RuleResources", typeof(RuleResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETURN statement without return value was found in {0}..
        /// </summary>
        internal static string AvoidBareReturn_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidBareReturn_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using Return statements with no explicit return value in Stored Procedures..
        /// </summary>
        internal static string AvoidBareReturn_RuleName {
            get {
                return ResourceManager.GetString("AvoidBareReturn_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @@rowcount and/or @@error was used directly in {0}.  @@rowcount/@@error should always be captured by a SET @variable statement, or safe selection assignment statement before use..
        /// </summary>
        internal static string AvoidDirectUseOfRowcount_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidDirectUseOfRowcount_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @@rowcount and/or @@error should never be used directly..
        /// </summary>
        internal static string AvoidDirectUseOfRowcount_RuleName {
            get {
                return ResourceManager.GetString("AvoidDirectUseOfRowcount_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GOTO statement was found in {0}..
        /// </summary>
        internal static string AvoidGoto_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidGoto_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid using Goto statements..
        /// </summary>
        internal static string AvoidGoto_RuleName {
            get {
                return ResourceManager.GetString("AvoidGoto_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null Literal was found in a comparison in {0}..
        /// </summary>
        internal static string AvoidNullLiteral_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidNullLiteral_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null is not a valid value to compare to..
        /// </summary>
        internal static string AvoidNullLiteral_RuleName {
            get {
                return ResourceManager.GetString("AvoidNullLiteral_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schema object with no schema name found in {0}..
        /// </summary>
        internal static string AvoidOnePartNames_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidOnePartNames_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always include the schema name when referencing an object..
        /// </summary>
        internal static string AvoidOnePartNames_RuleName {
            get {
                return ResourceManager.GetString("AvoidOnePartNames_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninitialised variable found in {0}..
        /// </summary>
        internal static string AvoidUninitialisedVariables_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidUninitialisedVariables_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables whose value is never set will be null..
        /// </summary>
        internal static string AvoidUninitialisedVariables_RuleName {
            get {
                return ResourceManager.GetString("AvoidUninitialisedVariables_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Parameter found in {0}..
        /// </summary>
        internal static string AvoidUnusedParameter_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidUnusedParameter_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Parameters point to potential coding errors..
        /// </summary>
        internal static string AvoidUnusedParameter_RuleName {
            get {
                return ResourceManager.GetString("AvoidUnusedParameter_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Table Variable found in {0}..
        /// </summary>
        internal static string AvoidUnusedTableVariable_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidUnusedTableVariable_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Table Variables point to potential coding errors..
        /// </summary>
        internal static string AvoidUnusedTableVariable_RuleName {
            get {
                return ResourceManager.GetString("AvoidUnusedTableVariable_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Variable found in {0}..
        /// </summary>
        internal static string AvoidUnusedVariables_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidUnusedVariables_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused Variables point to potential coding errors..
        /// </summary>
        internal static string AvoidUnusedVariables_RuleName {
            get {
                return ResourceManager.GetString("AvoidUnusedVariables_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write-only Variable found in {0}..
        /// </summary>
        internal static string AvoidWriteOnlyVariables_ProblemDescription {
            get {
                return ResourceManager.GetString("AvoidWriteOnlyVariables_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables whose values are set, but never used point to potential coding errors..
        /// </summary>
        internal static string AvoidWriteOnlyVariables_RuleName {
            get {
                return ResourceManager.GetString("AvoidWriteOnlyVariables_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create ResourceManager for {0} from {1}..
        /// </summary>
        internal static string CannotCreateResourceManager {
            get {
                return ResourceManager.GetString("CannotCreateResourceManager", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SamplesCategory.
        /// </summary>
        internal static string CategorySamples {
            get {
                return ResourceManager.GetString("CategorySamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clustered Key Column found in non-unique Index on a Clustered Table in {0}..
        /// </summary>
        internal static string CheckClusteredKeyColumnsNotIncludedInIndex_ProblemDescription {
            get {
                return ResourceManager.GetString("CheckClusteredKeyColumnsNotIncludedInIndex_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clustered Key Columns need not be explicitly included in a non-unique Index on a Clustered Table.  The clustering columns are already added to the end of the index leaf entry..
        /// </summary>
        internal static string CheckClusteredKeyColumnsNotIncludedInIndex_RuleName {
            get {
                return ResourceManager.GetString("CheckClusteredKeyColumnsNotIncludedInIndex_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicated column found in index or constraint in {0}..
        /// </summary>
        internal static string CheckForDuplicatedColumnsInIndexOrConstraint_ProblemDescription {
            get {
                return ResourceManager.GetString("CheckForDuplicatedColumnsInIndexOrConstraint_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid duplicating columns in the key of any index or constraint..
        /// </summary>
        internal static string CheckForDuplicatedColumnsInIndexOrConstraint_RuleName {
            get {
                return ResourceManager.GetString("CheckForDuplicatedColumnsInIndexOrConstraint_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unique constraint found with nullable columns in {0}.  You should probably make the columns non-nullable..
        /// </summary>
        internal static string CheckUniqueConstraintHasNoNullColumns_ProblemDescription {
            get {
                return ResourceManager.GetString("CheckUniqueConstraintHasNoNullColumns_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unique constraints generally should not have nullable columns..
        /// </summary>
        internal static string CheckUniqueConstraintHasNoNullColumns_RuleName {
            get {
                return ResourceManager.GetString("CheckUniqueConstraintHasNoNullColumns_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unique, non-filtered index found with nullable columns in {0}.  You should probably make the columns non-nullable, or make the index filtered to exclude nulls..
        /// </summary>
        internal static string CheckUniqueIndexHasNoNullColumns_ProblemDescription {
            get {
                return ResourceManager.GetString("CheckUniqueIndexHasNoNullColumns_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unique indexes generally should not have nullable columns unless the index is filtered to remove them..
        /// </summary>
        internal static string CheckUniqueIndexHasNoNullColumns_RuleName {
            get {
                return ResourceManager.GetString("CheckUniqueIndexHasNoNullColumns_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-core SP is called without checking the return status in {0}..
        /// </summary>
        internal static string EnforceCaptureSPReturnStatus_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceCaptureSPReturnStatus_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return status should always be retrieved..
        /// </summary>
        internal static string EnforceCaptureSPReturnStatus_RuleName {
            get {
                return ResourceManager.GetString("EnforceCaptureSPReturnStatus_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Table with heap structure was found in {0}..
        /// </summary>
        internal static string EnforceClusteredIndex_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceClusteredIndex_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tables should normally be clustered and not heap..
        /// </summary>
        internal static string EnforceClusteredIndex_RuleName {
            get {
                return ResourceManager.GetString("EnforceClusteredIndex_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreign Key with no supporting index found in {0}..
        /// </summary>
        internal static string EnforceForeignKeyIsIndexed_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceForeignKeyIsIndexed_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreign Keys should be supported by an appropriate index.  Otherwise table scans/locks will be taken..
        /// </summary>
        internal static string EnforceForeignKeyIsIndexed_RuleName {
            get {
                return ResourceManager.GetString("EnforceForeignKeyIsIndexed_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnamed constraint found in {0}.  Unnamed constraints make it difficult to perform database comparisons, and force redundant operations during code deployments..
        /// </summary>
        internal static string EnforceNamedConstraint_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceNamedConstraint_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid unnamed constraints.  These are assigned meaningless system-generated names at time of deployment..
        /// </summary>
        internal static string EnforceNamedConstraint_RuleName {
            get {
                return ResourceManager.GetString("EnforceNamedConstraint_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Table with no Primary Key was found in {0}..
        /// </summary>
        internal static string EnforcePrimaryKey_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforcePrimaryKey_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tables should normally have a Primary Key constraint defined..
        /// </summary>
        internal static string EnforcePrimaryKey_RuleName {
            get {
                return ResourceManager.GetString("EnforcePrimaryKey_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stored Procedure found without Return in {0}..
        /// </summary>
        internal static string EnforceReturn_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceReturn_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stored Procedures need at least one Return statement..
        /// </summary>
        internal static string EnforceReturn_RuleName {
            get {
                return ResourceManager.GetString("EnforceReturn_RuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code found without Try/Catch in {0}..
        /// </summary>
        internal static string EnforceTryCatch_ProblemDescription {
            get {
                return ResourceManager.GetString("EnforceTryCatch_ProblemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stored Procedures and Triggers need at least one Try/Catch block..
        /// </summary>
        internal static string EnforceTryCatch_RuleName {
            get {
                return ResourceManager.GetString("EnforceTryCatch_RuleName", resourceCulture);
            }
        }
    }
}
